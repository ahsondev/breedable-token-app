{"version":3,"sources":["utils/web3_api.ts","components/Loader.tsx","utils/config.ts","utils/api.ts","components/MintButton/MintButton.tsx","utils/helper.ts","pages/Home/Home.tsx","routes/index.ts","App.tsx","reportWebVitals.ts","reducers/sample.ts","store.ts","index.tsx"],"names":["web3","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","process","web3Modal","Web3Modal","network","cacheProvider","BrainDance","contract","nativeContract","this","addr","mintPricePerToken","sign","tx","from","to","contractConfig","contractAddress","value","data","methods","buyTicket","encodeABI","eth","sendTransaction","connectToWallet","a","connect","provider","Web3","Contract","BrainDanceNft","console","log","Loader","props","className","speedMultiplier","size","color","env","apiUrl","config","appID","networks","mainnet","chainId","alchemyHttpUrl","REACT_APP_ALCHEMY_RINKEBY_HTTP_URL","alchemyWssUrl","REACT_APP_ALCHEMY_RINKEBY_WSS_URL","rinkeby","kovan","REACT_APP_ALCHEMY_KOVAN_HTTP_URL","REACT_APP_ALCHEMY_KOVAN_WSS_URL","actionTypes","instance","axios","create","baseURL","params","headers","common","Accept","MintButton","onMint","executeRecaptcha","useGoogleReCaptcha","verifyRecaptcha","newToken","handleMint","onClick","type","encrypt","CryptoJS","AES","JSON","stringify","toString","decrypt","ciphertext","bytes","parse","enc","Utf8","headerToken","address","txt","substring","Home","window","useState","loading","setLoading","remainTokenCount","setRemainTokenCount","useEffect","counter","setInterval","onTimer","clearInterval","preslaeAddressLimit","call","presaleReservedAddressCount","connectMetamask","obj","price","paused","metamaskAccount","handleBuyTicket","NotificationManager","warning","api","post","Number","token","info","error","reCaptchaKey","routes","path","component","Modal","setAppElement","App","map","e","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","sample","state","action","payload","store","createStore","combineReducers","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.67fe71b4.chunk.js","sourcesContent":["import contractConfig from 'contracts/config.json'\r\nimport BrainDanceNft from 'contracts/BrainDanceNft.json'\r\nimport Web3 from 'web3'\r\nimport Web3Modal from 'web3modal'\r\n// import Onboard from 'bnc-onboard'\r\nimport WalletConnectProvider from '@walletconnect/web3-provider'\r\n\r\nlet web3: any\r\n\r\n// const onboard = Onboard({\r\n//   dappId: 'e31c177f-44ee-4dec-b21b-f6cdf362f531',       // [String] The API key created by step one above\r\n//   networkId: 4,  // [Integer] The Ethereum network ID your Dapp uses.\r\n//   darkMode: true,\r\n//   subscriptions: {\r\n//     wallet: (wallet: any) => {\r\n//        web3 = new Web3(wallet.provider)\r\n//     }\r\n//   },\r\n//   walletSelect: {\r\n//     wallets: [\r\n//       { walletName: \"metamask\", preferred: true },\r\n//     ] \r\n//   }\r\n// });\r\n\r\nconst providerOptions = {\r\n  walletconnect: {\r\n    package: WalletConnectProvider,\r\n    options: {\r\n      infuraId: process.env.REACT_APP_INFURA_ID,\r\n    }\r\n  }\r\n};\r\n\r\nconst web3Modal = new Web3Modal({\r\n  network: \"mainnet\", // optional\r\n  cacheProvider: false, // optional\r\n  providerOptions // required\r\n});\r\n\r\n\r\nexport class BrainDance {\r\n  nativeContract: any = null\r\n\r\n  constructor(contract: any) {\r\n    this.nativeContract = contract\r\n  }\r\n\r\n  buyTicket(addr: string, mintPricePerToken: number, sign: number) {\r\n    const tx = {\r\n      from: addr,\r\n      to: contractConfig.contractAddress,\r\n      value: mintPricePerToken,\r\n      data: this.nativeContract.methods.buyTicket(sign).encodeABI(),\r\n    }\r\n    return web3.eth.sendTransaction(tx)\r\n  }\r\n}\r\n\r\nexport const connectToWallet = async () => {\r\n  try {\r\n    // await onboard.walletSelect();\r\n    // await onboard.walletCheck();\r\n\r\n    const provider = await web3Modal.connect();\r\n    web3 = new Web3(provider);\r\n    const contract = new web3.eth.Contract(BrainDanceNft, contractConfig.contractAddress)\r\n    return { web3, contract }\r\n  } catch (switchError) {\r\n    console.log(switchError)\r\n  }\r\n  return null\r\n}\r\n\r\nexport const getEthBalance = (addr: string) =>\r\n  new Promise((resolve: (val: number) => void, reject: any) => {\r\n    web3.eth.getBalance(addr).then((_balance: any) => {\r\n        const balance = web3.utils.fromWei(_balance, 'ether')\r\n        resolve(balance)\r\n      },\r\n      (err: any) => {}\r\n    )\r\n  })\r\n","import ClipLoader from 'react-spinners/ClipLoader'\r\n\r\ninterface PropsType {}\r\n\r\nconst Loader = (props: PropsType) => {\r\n  return (\r\n    <div className='screen-overlay'>\r\n      <ClipLoader\r\n        speedMultiplier={0.5}\r\n        size={60}\r\n        color='var(--primary-color)'\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","let env = {}\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  env = {\r\n    network: 'rinkeby',\r\n    apiUrl: 'http://127.0.0.1:4000/api'\r\n  }\r\n} else {\r\n  env = {\r\n    network: 'mainnet',\r\n    apiUrl: '/api'\r\n  }\r\n}\r\n\r\nconst config = {\r\n  ...env,\r\n  appID: 'BDTicket',\r\n  networks: {\r\n    mainnet: {\r\n      chainId: '0x1',\r\n      alchemyHttpUrl: process.env.REACT_APP_ALCHEMY_RINKEBY_HTTP_URL,\r\n      alchemyWssUrl: process.env.REACT_APP_ALCHEMY_RINKEBY_WSS_URL\r\n    },\r\n    rinkeby: {\r\n      chainId: '0x4',\r\n      alchemyHttpUrl: process.env.REACT_APP_ALCHEMY_RINKEBY_HTTP_URL,\r\n      alchemyWssUrl: process.env.REACT_APP_ALCHEMY_RINKEBY_WSS_URL\r\n    },\r\n    kovan: {\r\n      chainId: '0x2A',\r\n      alchemyHttpUrl: process.env.REACT_APP_ALCHEMY_KOVAN_HTTP_URL,\r\n      alchemyWssUrl: process.env.REACT_APP_ALCHEMY_KOVAN_WSS_URL\r\n    }\r\n  },\r\n} as any\r\n\r\nexport const actionTypes = {\r\n  SAMPLE_ACTION: 'SAMPLE_ACTION'\r\n}\r\n\r\nexport default config\r\n","import axios from 'axios'\r\nimport config from './config'\r\n\r\nconst instance = axios.create({\r\n  baseURL: config.apiUrl,\r\n  params: {},\r\n  headers: {\r\n    common: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n    },\r\n  },\r\n})\r\n\r\nexport default instance\r\n","import React from 'react'\r\nimport { useGoogleReCaptcha } from 'react-google-recaptcha-v3'\r\n\r\nimport './MintButton.scoped.scss'\r\n\r\ninterface PropsType {\r\n  disabled?: boolean\r\n  presaleMode?: boolean\r\n  authenticated?: boolean\r\n  onMint?(): void\r\n}\r\n\r\nconst MintButton = (props: PropsType) => {\r\n  const { onMint } = props\r\n  const { executeRecaptcha } = useGoogleReCaptcha()\r\n\r\n  const verifyRecaptcha = async () => {\r\n    if (!executeRecaptcha) {\r\n      console.log('Execute recaptcha not yet available')\r\n      return null\r\n    }\r\n\r\n    try {\r\n      const newToken = await executeRecaptcha('MS_Pyme_DatosEmpresa')\r\n      return newToken\r\n    } catch (err) {\r\n      return null\r\n    }\r\n  }\r\n\r\n  const handleMint = async () => {\r\n    const recaptchaStatus = await verifyRecaptcha()\r\n    if (!recaptchaStatus) {\r\n      console.log('Recaptcha Error')\r\n      return\r\n    }\r\n    onMint && onMint()\r\n  }\r\n\r\n  return (\r\n    <button onClick={handleMint} type='button' className='mint'>\r\n      Buy\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default MintButton\r\n","import CryptoJS from 'crypto-js'\r\nimport config from './config'\r\n\r\nexport const getQueryValue = (name: string) => {\r\n  let url = window.location.href + ''\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&')\r\n  var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\r\n    results = regex.exec(url)\r\n  if (!results) return null\r\n  if (!results[2]) return ''\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '))\r\n}\r\n\r\n// ---------------------- crypto ------------------------------------------\r\nexport const encrypt = (data: any) =>\r\n  CryptoJS.AES.encrypt(JSON.stringify(data), process.env.REACT_APP_CRYPTO_KEY || '1234567890').toString()\r\nexport const decrypt = (ciphertext: string) => {\r\n  const bytes = CryptoJS.AES.decrypt(ciphertext, process.env.REACT_APP_CRYPTO_KEY || '1234567890')\r\n  return JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\r\n}\r\n\r\n// ---------------------- local storage --------------------------------------------------------------\r\nexport const setStorageItem = (key: string, data: any) => {\r\n  localStorage.setItem(config.appID + '_' + key, encrypt(JSON.stringify(data)))\r\n}\r\n\r\nexport const getStorageItem = (key: string, defaultVal: any) => {\r\n  try {\r\n    return JSON.parse(\r\n      decrypt(localStorage.getItem(config.appID + '_' + key) as string)\r\n    )\r\n  } catch (e) {\r\n    return defaultVal || false\r\n  }\r\n}\r\n\r\nexport const deleteStorageItem = (key: string) => {\r\n  localStorage.removeItem(config.appID + '_' + key)\r\n}\r\n\r\nexport const headerToken = (address: string) => {\r\n  const txt = encrypt(address)\r\n  return {\r\n    'X-GOLDEN-TOKEN1': txt.substring(0, 10),\r\n    'X-GOLDEN-TOKEN2': txt.substring(10)\r\n  }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { BrainDance, connectToWallet } from 'utils/web3_api'\r\nimport { NotificationManager } from 'components/Notification'\r\nimport Loader from 'components/Loader'\r\nimport api from 'utils/api'\r\nimport { GoogleReCaptchaProvider } from 'react-google-recaptcha-v3';\r\nimport MintButton from 'components/MintButton'\r\nimport './Home.scoped.scss'\r\nimport { decrypt, headerToken } from 'utils/helper'\r\n\r\nconst wnd = window as any\r\n\r\ninterface Props {}\r\n\r\nconst Home = (props: Props) => {\r\n  const [loading, setLoading] = useState(false)\r\n  const [remainTokenCount, setRemainTokenCount] = useState(0)\r\n  const [contract, setContract] = useState<any>(null)\r\n\r\n  useEffect(() => {\r\n    const counter = setInterval(onTimer, 4000)\r\n    return (() => {\r\n      clearInterval(counter)\r\n    })\r\n  }, [])\r\n\r\n  const onTimer = async () => {\r\n    if (contract) {\r\n      const preslaeAddressLimit = await contract.methods.preslaeAddressLimit().call()\r\n      const presaleReservedAddressCount = await contract.methods.presaleReservedAddressCount().call()\r\n      setRemainTokenCount(preslaeAddressLimit - presaleReservedAddressCount)\r\n    }\r\n  }\r\n\r\n  const connectMetamask = async () => {\r\n    const connectRes = await connectToWallet()\r\n    const obj = {\r\n      contract: null as any,\r\n      web3: null as any,\r\n      price: 0,\r\n      paused: true,\r\n      remainTokenCount: 0,\r\n      metamaskAccount: ''\r\n    }\r\n\r\n    // if (connectRes) {\r\n    //   obj.contract = connectRes.contract\r\n    //   obj.web3 = connectRes.web3\r\n    //   obj.metamaskAccount = wnd.ethereum.selectedAddress\r\n    //   obj.price = await connectRes.contract.methods.ticketPrice().call()\r\n    //   obj.paused = await connectRes.contract.methods.ticketPaused().call()\r\n    //   const preslaeAddressLimit = await connectRes.contract.methods.preslaeAddressLimit().call()\r\n    //   const presaleReservedAddressCount = await connectRes.contract.methods.presaleReservedAddressCount().call()\r\n    //   obj.remainTokenCount = preslaeAddressLimit - presaleReservedAddressCount\r\n    //   setRemainTokenCount(obj.remainTokenCount)\r\n    //   setContract(connectRes.contract)\r\n    // }\r\n    return obj\r\n  }\r\n\r\n  const handleBuyTicket = async () => {\r\n    const obj = await connectMetamask()\r\n    console.log(obj)\r\n    if (!obj.metamaskAccount) {\r\n      NotificationManager.warning('You are not connected to wallet', 'Not connected')\r\n      return\r\n    }\r\n    if (obj.paused) {\r\n      NotificationManager.warning('Minting was paused by owner', 'Paused')\r\n      return\r\n    }\r\n\r\n    setLoading(true)\r\n    try {\r\n      const {data} = await api.post('/buy-ticket',\r\n        { address: obj.metamaskAccount },\r\n        { headers: headerToken(obj.metamaskAccount) })\r\n      const sign = Number(decrypt(data.token))\r\n      const contract = new BrainDance(obj.contract)\r\n      await contract.buyTicket(obj.metamaskAccount, obj.price, sign)\r\n      NotificationManager.info('Successfully bought a ticket', 'Success')\r\n    } catch (e) {\r\n      console.log(e)\r\n      NotificationManager.error('Please check if you are online', 'Server Error')\r\n      setLoading(false)\r\n    }\r\n    setLoading(false)\r\n  }\r\n\r\n  return (\r\n    <div className='home-page'>\r\n      <div className='container'>\r\n        <div className='characters'>\r\n          {/* <div className='animation-wrapper'>\r\n            <iframe src=\"/Boy LifeTank.33/Boy Life Tank.33.html\"\r\n              allowFullScreen={true}\r\n              frameBorder=\"0\"\r\n              scrolling=\"no\"\r\n              title=\"BodyLife\"\r\n            />\r\n          </div>\r\n          <div className='animation-wrapper'>\r\n            <iframe src=\"Girl Life Tank.34/Boy Life Tank.34.html\"\r\n              allowFullScreen={true}\r\n              frameBorder=\"0\"\r\n              scrolling=\"no\"\r\n              title=\"GirlLife\"\r\n            />\r\n          </div> */}\r\n        </div>\r\n        <div className='button-wrapper'>\r\n   \r\n          <div className=\"publicsale-container\">\r\n            <div className='title'>{remainTokenCount === 0 ? \"Sold out\" : \"Buy Tickets\"}</div>\r\n          </div>\r\n          \r\n          <GoogleReCaptchaProvider reCaptchaKey={process.env.REACT_APP_RECAPTCHA_SITE_KEY}>\r\n            <MintButton onMint={() => handleBuyTicket()} />\r\n          </GoogleReCaptchaProvider>\r\n        </div>\r\n      </div>\r\n      \r\n      {loading && <Loader />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import Home from 'pages/Home'\r\n\r\nconst routes: any[] = [\r\n  {\r\n    path: '/',\r\n    component: Home\r\n  }\r\n]\r\n\r\nexport default routes\r\n","import { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom'\nimport routes from './routes'\nimport {NotificationContainer} from 'components/Notification'\nimport Modal from 'react-modal'\n\nModal.setAppElement('#root')\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Router>\n        <Switch>\n          {routes.map((e) => (\n            <Route key={e.path} path={e.path} exact component={e.component} />\n          ))}\n          <Redirect to='/' />\n        </Switch>\n      </Router>\n      <NotificationContainer/>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { actionTypes } from 'utils/config'\r\n\r\nconst initialState = {\r\n  data: {} as any,\r\n}\r\n\r\nconst sample = (state = initialState, action: ActionType) => {\r\n  const { type, payload } = action\r\n  switch (type) {\r\n    case actionTypes.SAMPLE_ACTION: {\r\n      state = { ...state, data: payload }\r\n      break\r\n    }\r\n\r\n    default:\r\n      break\r\n  }\r\n\r\n  return state\r\n}\r\n\r\nexport default sample\r\n","import { createStore, applyMiddleware, combineReducers } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nimport sample from 'reducers/sample'\r\n\r\nconst store = createStore(combineReducers({sample}), applyMiddleware(thunkMiddleware))\r\n\r\nexport default store\r\n","import ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport 'react-notifications/lib/notifications.css'\nimport './styles/app.scss'\n\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}